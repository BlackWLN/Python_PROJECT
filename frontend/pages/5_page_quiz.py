import streamlit as st
import time

# Data
questions = [
    {
        "question": "–ö–∞–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø '–ø–µ—Ä–≤—ã–π –∑–∞—à–µ–ª - –ø–µ—Ä–≤—ã–π –≤—ã—à–µ–ª'?",
        "type": "multiple_choice",
        "options": ["–û—á–µ—Ä–µ–¥—å", "–°—Ç—ç–∫", "–°–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫", "–î–µ—Ä–µ–≤–æ"],
        "correct_answer": "C—Ç—ç–∫",
    },
    {
        "question": "–ö–∞–∫–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–∞—Å—Å–∏–≤?",
        "type": "multiple_choice",
        "options": ["O(1)", "O(n)", "O(log n)", "O(n^2)"],
        "correct_answer": "O(1)",
    },
    {
        "question": "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –±–∏–Ω–∞—Ä–Ω–æ–µ –¥–µ—Ä–µ–≤–æ, –≤ –∫–æ—Ç–æ—Ä–æ–º –∫–∞–∂–¥—ã–π —É–∑–µ–ª –∏–º–µ–µ—Ç –∏–ª–∏ –Ω–æ–ª—å –∏–ª–∏ –¥–≤–∞ —Ä–µ–±–µ–Ω–∫–∞?",
        "type": "multiple_choice",
        "options": ["–ü–æ–ª–Ω–æ–µ –¥–µ—Ä–µ–≤–æ", "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ –¥–µ—Ä–µ–≤–æ", "–ò–¥–µ–∞–ª—å–Ω–æ–µ –¥–µ—Ä–µ–≤–æ", "–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –¥–µ—Ä–µ–≤–æ"],
        "correct_answer": "–ü–æ–ª–Ω–æ–µ –¥–µ—Ä–µ–≤–æ",
    },
    {
        "question": "–û–±—ä—è—Å–Ω–∏ —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É —Å—Ç—ç–∫–æ–º –∏ –æ—á–µ—Ä–µ–¥—å—é.",
        "type": "text",
    },
    {
        "question": "–ß—Ç–æ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è –ø–æ–¥ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é?",
        "type": "text",
    },
    {
        "question": "–ö–∞–∫–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–∞—Å—Å–∏–≤–µ?",
        "type": "multiple_choice",
        "options": ["O(1)", "O(n)", "O(log n)", "O(n^2)"],
        "correct_answer": "O(n)",
    },
]

if "current_question" not in st.session_state:
    st.session_state.current_question = 0
if "answers" not in st.session_state:
    st.session_state.answers = [""] * len(questions)
if "question_status" not in st.session_state:
    st.session_state.question_status = ["–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞"] * len(questions)
if "start_time" not in st.session_state:
    st.session_state.start_time = time.time()
if "timer_running" not in st.session_state:
    st.session_state.timer_running = True 
if "total_time" not in st.session_state:
    st.session_state.total_time = 30 * 60  # 30 minutes

def format_time(seconds):
    minutes, seconds = divmod(seconds, 60)
    return f"{int(minutes):02}:{int(seconds):02}"

def next_question():
    st.session_state.current_question = min(
        st.session_state.current_question + 1, len(questions) - 1
    )

def prev_question():
    st.session_state.current_question = max(
        st.session_state.current_question - 1, 0
    )

def submit_answer():
    question_index = st.session_state.current_question
    current_question_data = questions[question_index]

    if current_question_data["type"] == "multiple_choice":
        if st.session_state.selected_option:
            st.session_state.answers[question_index] = st.session_state.selected_option
            st.session_state.question_status[question_index] = "–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω"
    elif current_question_data["type"] == "text":
        if st.session_state.text_answer:
            st.session_state.answers[question_index] = st.session_state.text_answer
            st.session_state.question_status[question_index] = "–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω"

def navigate_to_question(question_number):
    st.session_state.current_question = question_number

def finish_test():
    st.session_state.timer_running = False
    st.write("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")

st.set_page_config(page_title="–û—Å–Ω–æ–≤—ã —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö", page_icon="üíª", layout="centered")


st.markdown("""
    <style>
        div[data-testid="stVerticalBlock"] > div[data-testid="stHorizontalBlock"] > div:first-child > div > div > div > button {
            width: 40px;
            height: 40px;
            margin: 2px;
        }
    </style>
""", unsafe_allow_html=True)

# Header
col1, col2 = st.columns([1, 3])
with col1:
    st.markdown("[–í—ã–π—Ç–∏ –∏–∑ —Ç–µ—Å—Ç–∞](#)")

with col2:
    if st.session_state.timer_running:
        time_elapsed = int(time.time() - st.session_state.start_time)
        remaining_time = max(0, st.session_state.total_time - time_elapsed)
    else:
        time_elapsed = int(time.time() - st.session_state.start_time)
        remaining_time = max(0, st.session_state.total_time - time_elapsed)

    st.markdown(f"<p style='text-align: right;'>{format_time(remaining_time)}</p>", unsafe_allow_html=True)

st.title("–û—Å–Ω–æ–≤—ã —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö")

# Progress Bar
progress_value = (st.session_state.current_question + 1) / len(questions)
col1, col2 = st.columns([3, 1])

with col1:
    st.progress(progress_value)
with col2:
    unanswered_count = st.session_state.question_status.count("–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞")
    st.markdown(f"–í–æ–ø—Ä–æ—Å {st.session_state.current_question + 1} –∏–∑ {len(questions)}", unsafe_allow_html=True)

# Main
col1, col2, col3 = st.columns([1, 5, 2])

with col1:
    for i in range(len(questions)):
        status = st.session_state.question_status[i]
        button_label = f"{i+1}"
        button_type = "primary" if st.session_state.current_question == i else "secondary"
        if st.session_state.question_status[i] == "–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω":
            button_type = "primary"

        st.button(
            button_label,
            key=f"nav_{i}",
            on_click=navigate_to_question,
            args=(i,),
            use_container_width=False,
            type=button_type
        )
    
with col2:
    st.subheader(f"–í–æ–ø—Ä–æ—Å {st.session_state.current_question + 1} –∏–∑ {len(questions)}")

    question_data = questions[st.session_state.current_question]
    st.write(question_data["question"])

    if question_data["type"] == "multiple_choice":
        st.session_state.selected_option = st.radio(
            "", options=question_data["options"], key=f"radio_{st.session_state.current_question}"
        )
    elif question_data["type"] == "text":
        st.session_state.text_answer = st.text_area(
            "–ü–∏—à–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç –∑–¥–µ—Å—å...",
            value=st.session_state.answers[st.session_state.current_question],
            height=150,
            key=f"text_area_{st.session_state.current_question}",
        )

    st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç", on_click=submit_answer)
    
with col3:
    if st.button("–ó–∞–≤–µ—Ä—à–∏—Ç—å", key="finish_button"):
        st.success("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!")